// Copyright (c) 2019-2020 The Open-Transactions developers
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

#include "license.hpp"  // IWYU pragma: associated

#include <opentxs/opentxs.hpp>
#include <algorithm>
#include <iterator>
#include <string>

auto width_ = std::size_t{0};

auto make_vector() noexcept -> LicenseData;
auto make_vector() noexcept -> LicenseData
{
    auto output = LicenseData{
        {"Metier", R"~!~(@METIER_LICENSE_TEXT@)~!~"},
        {"Boost", R"~!~(@BOOST_LICENSE_TEXT@)~!~"},
        {"libsecp256k1", R"~!~(@SECP256K1_LICENSE_TEXT@)~!~"},
        {"libsodium", R"~!~(@SODIUM_LICENSE_TEXT@)~!~"},
        {"LMDB", R"~!~(@LMDB_LICENSE_TEXT@)~!~"},
        {"OpenSSL", R"~!~(@OPENSSL_LICENSE_TEXT@)~!~"},
        {"Qt", R"~!~(@QT_LICENSE_TEXT@)~!~"},
        {"ZeroMQ", R"~!~(@ZMQ_LICENSE_TEXT@)~!~"},
    };
    const auto& ot = opentxs::LicenseData();
    std::copy(ot.begin(), ot.end(), std::back_inserter(output));
    std::sort(
        std::next(output.begin()),
        output.end(),
        [](const auto& lhs, const auto& rhs) {
            return std::lexicographical_compare(
                std::begin(lhs.first),
                std::end(lhs.first),
                std::begin(rhs.first),
                std::end(rhs.first),
                [](const auto& c1, const auto& c2) {
                    return std::tolower(c1) < std::tolower(c2);
                });
        });
    for (const auto& [key, value] : output) {
        width_ = std::max(width_, key.size());
    }

    return output;
}

auto LongestLicenseDescription() noexcept -> std::size_t { return width_; }

auto MetierLicenseData() noexcept -> const LicenseData&
{
    static const auto data{make_vector()};

    return data;
}
